import org.junit.jupiter.api.Test;

import java.math.BigInteger;

import static org.junit.jupiter.api.Assertions.*;

class UnitTest {

    @Test
    void encryptMessage() throws Exception {
        // trying to test this method, w/o generateKeys
        // message, publicKey, n are required
        RSA rsa = new RSA();
        rsa.setPublicKey(new BigInteger("65537"));
        //rsa.setPublicKey(new BigInteger("65531"));  // falsch
        rsa.setN(new BigInteger("104276905391471333758560821156174021370952266685538577548488994989575363634276999414573117467448601378534510002205048590254419924666599263133604334309740598802272148730733678666880045313223770984691800265628777733960587770237390140816924137350280281554707315034636290146404407483773434405890737325759748945507"));
        BigInteger expected_cipher = new BigInteger("32630834064133421428359215989071670394825465212668428184177102124617483577967939760529417950784685380905537906622940930103617563594824024896367177123485807039502468555024528818768477756502493874472874678232292162929789325166024379820773151028968025090471288632992097250925386389281188789918795935429976956590");
        assertEquals(expected_cipher, rsa.encryptMessage(new BigInteger("98765432123456789")));
    }

    @Test
    void decryptMessage() {
        // message, privateKey, n are required
        RSA rsa = new RSA();
        rsa.setPrivateKey(new BigInteger("95630786345783321984387155865381802744378657622425883491719701326860370180370637896365230009705407459207160148656942420618298071810376054932618540748254237234168781159111814542918297483221280821958651094801375973035545064860234987826959342682885736245987963161099613909921799699973951718144854780153544379897"));
        //wrong rsa.setPrivateKey(new BigInteger("85630786345783321984387155865381802744378657622425883491719701326860370180370637896365230009705407459207160148656942420618298071810376054932618540748254237234168781159111814542918297483221280821958651094801375973035545064860234987826959342682885736245987963161099613909921799699973951718144854780153544379897"));
        rsa.setN(new BigInteger("104276905391471333758560821156174021370952266685538577548488994989575363634276999414573117467448601378534510002205048590254419924666599263133604334309740598802272148730733678666880045313223770984691800265628777733960587770237390140816924137350280281554707315034636290146404407483773434405890737325759748945507"));
        BigInteger expected_ori_m = new BigInteger("98765432123456789");
        assertEquals(expected_ori_m, rsa.decryptMessage(new BigInteger("32630834064133421428359215989071670394825465212668428184177102124617483577967939760529417950784685380905537906622940930103617563594824024896367177123485807039502468555024528818768477756502493874472874678232292162929789325166024379820773151028968025090471288632992097250925386389281188789918795935429976956590")));

    }

    @Test
    void decryptMessageUseCrt_signature() throws Exception {
        RSA rsa = new RSA();
        BigInteger mForSignature = new BigInteger("111111111111111111111111111111111111111111111111111111111111111111111111");
        // wrong BigInteger mForSignature = new BigInteger("101111111111111111111111111111111111111111111111111111111111111111111111");
        rsa.setP(new BigInteger("13032626367659388826866193380256062289110903714839588430087230713359570855959544711054696978976936462143415315389047907384282952268465096978450975853435229"));
        rsa.setQ(new BigInteger("8001219589187001125369406421772169500088707405313566797621858727930195588963941706544853053688087401234682911979799817340207672855977030563231855541883583"));
        rsa.setN(new BigInteger("104276905391471333758560821156174021370952266685538577548488994989575363634276999414573117467448601378534510002205048590254419924666599263133604334309740598802272148730733678666880045313223770984691800265628777733960587770237390140816924137350280281554707315034636290146404407483773434405890737325759748945507"));
        rsa.setPublicKey(new BigInteger("65537"));
        rsa.setPrivateKey(new BigInteger("95630786345783321984387155865381802744378657622425883491719701326860370180370637896365230009705407459207160148656942420618298071810376054932618540748254237234168781159111814542918297483221280821958651094801375973035545064860234987826959342682885736245987963161099613909921799699973951718144854780153544379897"));
        BigInteger expected_sig = new BigInteger("40884933221828123870354438495259707922119836101860109263776977745045067644639793682040490908075525584742824336722358653662083185203393053151979523420047014730211660947015832779487484693767948175099287079739349401741297489134596602133804822379190737371462777764774013625230696828881061195063123530246312648818");
        assertEquals(expected_sig, rsa.decryptMessageUseCrt(mForSignature));
    }
}